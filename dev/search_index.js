var documenterSearchIndex = {"docs":
[{"location":"references/#References","page":"References","title":"References","text":"","category":"section"},{"location":"references/","page":"References","title":"References","text":"","category":"page"},{"location":"api_NURBStoolbox/#API:-NURBS-Toolbox","page":"NURBS Toolbox","title":"API: NURBS Toolbox","text":"","category":"section"},{"location":"api_NURBStoolbox/","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"CurrentModule = MagMechFEM_Matlab2Julia.NURBStoolbox","category":"page"},{"location":"api_NURBStoolbox/","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"Pages = [\"api_NURBStoolbox.md\"]\nDepth = 2","category":"page"},{"location":"api_NURBStoolbox/#Module","page":"NURBS Toolbox","title":"Module","text":"","category":"section"},{"location":"api_NURBStoolbox/","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"<style>\n#horlist ul {\ndisplay: grid;\ngrid-template-columns: repeat(auto-fit, minmax(25ch, 1fr));\ngrid-gap: 4px;\nlist-style: none;\n}\n</style>\n<div id=\"horlist\">","category":"page"},{"location":"api_NURBStoolbox/","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"NURBStoolbox","category":"page"},{"location":"api_NURBStoolbox/#MagMechFEM_Matlab2Julia.NURBStoolbox","page":"NURBS Toolbox","title":"MagMechFEM_Matlab2Julia.NURBStoolbox","text":"NURBStoolbox\n\nNURBS Toolbox module ported from the Matlab NURBS toolbox of Mark Spink  (2000) (can currently be found on Mathworks FileExchange[1]). The Matlab package dates approximately back to the year 2000. Newer versions are written for Octave and are hosted as Octave Community package[2] (those might be compatible with Matlab).\n\nThis package is licensed under GNU General Puplic License version 2.\n\n[1]: Penguian (2010). NURBS Toolbox by D.M. Spink https://www.mathworks.com/matlabcentral/fileexchange/26390-nurbs-toolbox-by-d-m-spink, MATLAB Central File Exchange. Retrieved April 14, 2021.\n\n[2]: M. Spink, D. Claxton, C. de Falco, R. Vazquez (2021-03-09) Nurbs. Octave Forge Community packages. https://octave.sourceforge.io/nurbs/index.html\n\nExports\n\nNURBS\nNURBS1D\nNURBS2D\nbasisfun\nbspdegelev\nbspderiv\nbspeval\nbspkntins\ndemo4surf\ndemocirc\ndemocoons\ndemocurve\ndemocylind\ndemodegelev\ndemodercrv\ndemodersrf\ndemoellip\ndemogeom\ndemohelix\ndemokntins\ndemoline\ndemorect\ndemorevolve\ndemoruled\ndemotorus\nfindspan\nnrb4surf\nnrbcirc\nnrbcoons\nnrbcylind\nnrbdegelev\nnrbderiv\nnrbdeval\nnrbeval\nnrbextrude\nnrbkntins\nnrbline\nnrbmak\nnrbplot\nnrbplot!\nnrbrect\nnrbreverse\nnrbrevolve\nnrbruled\nnrbtestcrv\nnrbtestsrf\nnrbtform\nnrbtransp\nvecangle\nveccross\nvecdot\nvecmag\nvecmag2\nvecnorm_toolbox\nvecrotx\nvecroty\nvecrotz\nvecscale\nvectrans\n\nImports\n\nBase\nCore\nDocStringExtensions\nLinearAlgebra\nPlots\n\n\n\n\n\n","category":"module"},{"location":"api_NURBStoolbox/","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"</div>","category":"page"},{"location":"api_NURBStoolbox/#Data-Structures","page":"NURBS Toolbox","title":"Data Structures","text":"","category":"section"},{"location":"api_NURBStoolbox/","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"<style>\n#horfield li > p + p::before {\ncontent: \": \";\n}\n#horfield li > p {\ndisplay: contents;\n}\n</style>\n<div id=\"horfield\">","category":"page"},{"location":"api_NURBStoolbox/","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"NURBS\nNURBS1D\nNURBS2D","category":"page"},{"location":"api_NURBStoolbox/#MagMechFEM_Matlab2Julia.NURBStoolbox.NURBS","page":"NURBS Toolbox","title":"MagMechFEM_Matlab2Julia.NURBStoolbox.NURBS","text":"NURBS{I<:Integer,F<:AbstractFloat}\n\nAbstract supertype for NURBS data tayps see NURBS1D and NURBS2D.\n\nBoth curves and surfaces where represented by a structure that where compatible with the Spline Toolbox from Mathworks.\n\n\n\n\n\n","category":"type"},{"location":"api_NURBStoolbox/#MagMechFEM_Matlab2Julia.NURBStoolbox.NURBS1D","page":"NURBS Toolbox","title":"MagMechFEM_Matlab2Julia.NURBStoolbox.NURBS1D","text":"NURBS1D{I<:Integer,F<:AbstractFloat} <: NURBS{I,F}\n\nNURBS datatype representing a NURBS curve. Constructed with nrbmak.\n\ninfo: Note:\nThe control points are always converted and stored within the NURBS structure as 4D homogeneous coordinates.\n\nField\n\nform::String\nType name 'B-NURBS'\ndim::Integer\nDimension of the control points\nnumber::Integer\nNumber of Control points\norder::Integer\nOrder of the spline\nknots::Vector{F} where F<:AbstractFloat\nKnot sequence\ncoefs::Matrix{F} where F<:AbstractFloat\nControl Points\n\n\n\n\n\n","category":"type"},{"location":"api_NURBStoolbox/#MagMechFEM_Matlab2Julia.NURBStoolbox.NURBS2D","page":"NURBS Toolbox","title":"MagMechFEM_Matlab2Julia.NURBStoolbox.NURBS2D","text":"NURBS2D{I<:Integer,F<:AbstractFloat} <: NURBS{I,F}\n\nNURBS datatype representing a NURBS surface. Constructed with nrbmak.\n\ninfo: Note:\nThe control points are always converted and stored within the NURBS structure as 4D homogeneous coordinates. For a surface the spline degree is a vector [du;dv] containing the order along the U and V directions respectively.\n\nField\n\nform::String\nType name 'B-NURBS'\ndim::Integer\nDimension of the control points\nnumber::Vector{I} where I<:Integer\nNumber of Control points\norder::Vector{I} where I<:Integer\nOrder of the spline\nknots::Array{Vector{F}, 1} where F<:AbstractFloat\nKnot sequence\ncoefs::Array{F, 3} where F<:AbstractFloat\nControl Points\n\n\n\n\n\n","category":"type"},{"location":"api_NURBStoolbox/","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"</div>","category":"page"},{"location":"api_NURBStoolbox/#Evaluation-Functions/Methods","page":"NURBS Toolbox","title":"Evaluation Functions/Methods","text":"","category":"section"},{"location":"api_NURBStoolbox/","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"basisfun\nbspeval\nnrbmak\nnrbeval\nnrbplot\nnrbplot!","category":"page"},{"location":"api_NURBStoolbox/#MagMechFEM_Matlab2Julia.NURBStoolbox.basisfun","page":"NURBS Toolbox","title":"MagMechFEM_Matlab2Julia.NURBStoolbox.basisfun","text":"basisfun(i::I,u::F,p::I,U::Vector{F}\n        )::Vector{F} where {I<:Integer,F<:AbstractFloat}\n\nCalculates the B-Spline basis function at u.\n\nArguments:\n\ni: knot span from findspan\nu: parametric point\np: spline degree\nU: knot sequence\n\nOutput:\n\nN: basis function vector of lenght p+1\n\nExamples:\n\njulia> N = basisfun(i,u,p,U)\n\nReference:\n\nAlgorithm A2.2 from 'The NURBS BOOK' pg70 (Les Piegl , Wayne Tiller  (1997))\n\n\n\n\n\n","category":"function"},{"location":"api_NURBStoolbox/#MagMechFEM_Matlab2Julia.NURBStoolbox.bspeval","page":"NURBS Toolbox","title":"MagMechFEM_Matlab2Julia.NURBStoolbox.bspeval","text":"bspeval(d::I,c::Matrix{F},k::Vector{F},u::Vector{F}\n       )::Matrix{F} where {I<:Integer,F<:AbstractFloat}\n\nEvaluate a univariate B-Spline.\n\nArguments:\n\nd: degree of the B-Spline\nc: control points, matrix of size (dim,nc)\nk: knot sequence, vector of size nk\nu: parametric evaluation points, vector of size nu\n\nOutput:\n\np: Evaluated points, matrix of size (dim,nu)\n\nExamples:\n\njulia> p = bspeval(d,c,k,u)\n\nReference:\n\nAlgorithm A3.1 from 'The NURBS BOOK' pg82 (Les Piegl , Wayne Tiller  (1997))\n\n\n\n\n\n","category":"function"},{"location":"api_NURBStoolbox/#MagMechFEM_Matlab2Julia.NURBStoolbox.nrbmak","page":"NURBS Toolbox","title":"MagMechFEM_Matlab2Julia.NURBStoolbox.nrbmak","text":"nrbmak(coefs::Union{Matrix{F}, Array{F,3}},\n       knots::Union{Vector{F}, Vector{Vector{F}}}\n      )::NURBS where {F<:AbstractFloat}\n\nConstruct the NURBS structure given the control points and the knots.\n\nThis function is used as a convenient means of constructing the NURBS data structure. Many of the other functions in the toolbox rely on the NURBS structure been correctly defined. This function not only constructs the proper structure, but also checks for consistency. The user is still free to build his own structure, in fact a few functions in the toolbox do this for convenience.\n\nArguments:\n\ncoefs: Control points, these can be either Cartesian or homogeneous coordinates. For a curve the control points are represented by a matrix of size (dim,nu) and for a surface by a multidimensional array of size (dim,nu,nv). Where nu is number of points along the parametric U direction, and nv the number of points along the V direction. dim is the dimension valid options are:\n2 : (x,y)        2D Cartesian coordinates   3 : (x,y,z)      3D Cartesian coordinates   4 : (wx,wy,wz,w) 4D homogeneous coordinates\nknots: Non-decreasing knot sequence spanning the interval [0.0;1.0]. It is assumed that the curves and surfaces are clamped to the start and end control points by knot multiplicities equal to the spline order. For a curve knots form a vector and for a surface the knots are stored by two vectors for U and V in a vector of vectors [uknots, vknots]\n\nOutput:\n\nnurbs: NURBS data structure see NURBS1D and NURBS2D.\n\ninfo: Note:\nThe control points are always converted and stored within the NURBS structure as 4D homogeneous coordinates. For a surface the spline degree is a vector [du;dv] containing the order along the U and V directions respectively.\n\nExamples:\n\nConstruct a 2D line from [0.0;0.0] to [1.5;3.0]. For a straight line a spline of order 2 is required. Note that the knot sequence has a multiplicity of 2 at the start [0.0;0.0] and end [1.0;1.0] in order to clamp the ends.\n\njulia> line = nrbmak([0.0 1.5; 0.0 3.0],vec([0.0 0.0 1.0 1.0]))\n\nConstruct a surface in the x-y plane i.e\n\n^  (0.0,1.0) ------------ (1.0,1.0)\n|      |                      |\n| V    |                      |\n|      |      Surface         |\n|      |                      |\n|      |                      |\n|  (0.0,0.0) ------------ (1.0,0.0)\n|\n|------------------------------------>\n                                  U\n\njulia> coefs = cat([0.0 0.0; 0.0 1.0],[1.0 1.0; 0.0 1.0],dims=3);\njulia> knots = [vec([0.0 0.0 1.0 1.]),vec([0.0 0.0 1.0 1.0])];\njulia> plane = nrbmak(coefs,knots)\n\nReference:\n\nrelated data types: NURBS1D and NURBS2D\n\n\n\n\n\n","category":"function"},{"location":"api_NURBStoolbox/#MagMechFEM_Matlab2Julia.NURBStoolbox.nrbeval","page":"NURBS Toolbox","title":"MagMechFEM_Matlab2Julia.NURBStoolbox.nrbeval","text":"nrbeval(nurbs::NURBS{I,F},\n        tt::Union{Vector{F}, Vector{Vector{F}}, Matrix{F}} [,\n        flag::Symbol=:cartesian]\n       ) where {I<:Integer, F<:AbstractFloat}\n\nEvaluate a NURBS structure at parametric points.\n\nEvaluation of NURBS curves or surfaces at parametric points along the U and V directions. Either homogeneous coordinates are returned if the flag is set accordingly otherwise cartesian coordinates. This function utilises the function bspeval.\n\nArguments:\n\nnurbs: NURBS structure\ntt: parametric evaluation points either as Vector{F} or Vector{Vector{F}}\nflag: flag indicating that cartesian coordinates or homogeneous coordinates should be returned (valid values: :cartesian (default) or :homogeneous)\n\nOutput:\n\np::Union{Matrix{F},Array{F,3}}: Evaluated points on the NURBS curve or  surface as cartesian coordinates (x,y,z). If flag=:homogeneous is set the  points are returned as homogeneous coordinates (wx,wy,wz).\nw::Union{Vector{F},Matrix{F}}: Weights of the homogeneous coordinates of the evaluated points. Note: Only returned it the corresponding flag is set (see above).\n\nExamples:\n\njulia> p = nrbeval(nurbs,tt)\njulia> p,w = nrbeval(nurbs,tt,:homogeneous)\njulia> p = nrbeval(srf,[ut,vt])\n\nEvaluate the NURBS circle with twenty points from 0.0 to 1.0.\n\njulia> nrb = nrbcirc();\njulia> ut = collect(range(0.0,stop=1.0,length=20))\njulia> p = nrbeval(nrb,ut)\n\nnote: Note:\nContrary to the Matlab version does this ported version evaluates not the varargout count to switch between different return values. A symbol flag is used instead.\n\nReference\n\nsee also: bspeval\n\n\n\n\n\n","category":"function"},{"location":"api_NURBStoolbox/#MagMechFEM_Matlab2Julia.NURBStoolbox.nrbplot","page":"NURBS Toolbox","title":"MagMechFEM_Matlab2Julia.NURBStoolbox.nrbplot","text":"nrbplot(nurbs::NURBS{I,F},\n        npts::Union{I, Vector{I}} [;\n        plotargs... ]\n       ) where {I<:Integer,F<:AbstractFloat}\n\nPlot a NURBS curve or a surface.\n\nArguments:\n\nnurbs: NURBS structure\nnpts: Number of evaluation points, for a surface a vector with two elements for the number of points along the U and V directions respectively.\nplotargs: plot arguments to pass to the wrapped plot function\n\nnote: Note:\nFor 3D Plots nrbplot uses the Plots.pyplot() backend. Use plot arguments compatible with that backend.\n\nExamples:\n\njulia> nrbplot(nrb,subd)\njulia> nrbplot(nrb,subd,c=:winter)\n\nPlot the test surface with 20 points along the U direction and 30 along the V direction\n\njulia> nrbplot(nrbtestsrf,[20;30],c=:copper)\n\nnote: Note:\nContrary to the Matlab version does this ported version supports no specialised input arguments just pass named plot arguments which will be passed to the wrapped plot functions.\n\nnote: Note:\nIt is also possible to overload the Julia plot() function with the mechanic Recipes.\n\nReference\n\nsee also: nrbeval\n\n\n\n\n\n","category":"function"},{"location":"api_NURBStoolbox/#MagMechFEM_Matlab2Julia.NURBStoolbox.nrbplot!","page":"NURBS Toolbox","title":"MagMechFEM_Matlab2Julia.NURBStoolbox.nrbplot!","text":"nrbplot!(nurbs::NURBS{I,F},\n         npts::Union{I, Vector{I}} [;\n         plotargs... ]\n        ) where {I<:Integer,F<:AbstractFloat}\n\nPlot a NURBS curve or a surface.\n\nWrapper of nrbplot in order to introduce the Julia plot append mechanic for that plot routine.\n\nnote: Note:\nThis function serves only as wrapper for the nrbplot function for input arguments and usage look at that function.\n\nReference\n\nsee nrbplot\n\n\n\n\n\n","category":"function"},{"location":"api_NURBStoolbox/#Utility-and-Modification-Functions/Methods","page":"NURBS Toolbox","title":"Utility and Modification Functions/Methods","text":"","category":"section"},{"location":"api_NURBStoolbox/","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"findspan\nvecscale\nvectrans\nvecrotx\nvecroty\nvecrotz\nnrbtform\nnrbextrude\nnrbrevolve\nvecdot\nveccross\nvecmag\nvecmag2\nvecnorm_toolbox\nvecangle\nnrbtransp\nbspdegelev\nnrbdegelev\nbspkntins\nnrbkntins\nbspderiv\nnrbderiv\nnrbdeval\nnrbreverse\nnrbruled\nnrbcoons","category":"page"},{"location":"api_NURBStoolbox/#MagMechFEM_Matlab2Julia.NURBStoolbox.findspan","page":"NURBS Toolbox","title":"MagMechFEM_Matlab2Julia.NURBStoolbox.findspan","text":"findspan(n::I,p::I,u::F,U::Vector{F})::I where {I<:Integer,F<:AbstractFloat}\n\nFind the span of a B-Spline knot vector at a parametric point\n\nArguments:\n\nn: nuber of control points -1\np: spline degree\nn: parametric point\nU: knot sequence\n\nOutput:\n\ns: knot span of u in U\n\nExamples:\n\njulia> s = findspan(n,p,u,U)\n\nReference:\n\nAlgorithm A2.1 from 'The NURBS BOOK' pg68 (Les Piegl , Wayne Tiller  (1997))\n\n\n\n\n\n","category":"function"},{"location":"api_NURBStoolbox/#MagMechFEM_Matlab2Julia.NURBStoolbox.vecscale","page":"NURBS Toolbox","title":"MagMechFEM_Matlab2Julia.NURBStoolbox.vecscale","text":"vecscale(svec::Vector{F})::Matrix{F} where {F<:AbstractFloat}\n\nTransformation matrix for a scaling.\n\nReturns a (4x4) Transformation matrix for scaling.\n\nThe matrix is:\n\n[ sx   0   0   0]\n[  0  sy   0   0]\n[  0   0  sz   0]\n[  0   0   0   1]\n\nArguments:\n\nsvec: A vectors defining the scaling along the x,y and z axes. i.e. [sx; sy; sy]\n\nOutput:\n\nst: Scaling Transformation Matrix\n\nExamples:\n\njulia> ss = vecscale(svec)\n\nScale up the NURBS line [0.0;0.0;0.0] - [1.0;1.0;1.0] by 3 along the x-axis, 2 along the y-axis and 4 along the z-axis.\n\njulia> line = nrbline(vec([0.0 0.0 0.0]),vec([1.0 1.0 1.0]));\njulia> scale = vecscale(vec([3.0 2.0 4.0]));\njulia> sline = nrbtform(line, scale)\n\nReference\n\nsee also: nrbtform\n\n\n\n\n\n","category":"function"},{"location":"api_NURBStoolbox/#MagMechFEM_Matlab2Julia.NURBStoolbox.vectrans","page":"NURBS Toolbox","title":"MagMechFEM_Matlab2Julia.NURBStoolbox.vectrans","text":"vectrans(tvec::Vector{F})::Matrix{F} where {F<:AbstractFloat}\n\nTransformation matrix for a translation.\n\nReturns a (4x4) Transformation matrix for translation.\n\nThe matrix is:\n\n[ 1   0   0  tx ]\n[ 0   1   0  ty ]\n[ 0   0   1  tz ]\n[ 0   0   0   1 ]\n\nArguments:\n\ntvec: A vectors defining the translation along the x,y and z axes. i.e. [tx; ty; ty]\n\nOutput:\n\nst: Translation Transformation Matrix\n\nExamples:\n\njulia> st = vectrans(tvec)\n\nTranslate the NURBS line [0.0;0.0;0.0] - [1.0;1.0;1.0] by 3 along the x-axis, 2 along the y-axis and 4 along the z-axis.\n\njulia> line = nrbline(vec([0.0 0.0 0.0]),vec([1.0 1.0 1.0]));\njulia> trans = vectrans(vec([3.0 2.0 4.0]));\njulia> tline = nrbtform(line, trans);\n\nReference\n\nsee also: nrbtform\n\n\n\n\n\n","category":"function"},{"location":"api_NURBStoolbox/#MagMechFEM_Matlab2Julia.NURBStoolbox.vecrotx","page":"NURBS Toolbox","title":"MagMechFEM_Matlab2Julia.NURBStoolbox.vecrotx","text":"vecrotx(angle::F)::Matrix{F} where {F<:AbstractFloat}\n\nTransformation matrix for a rotation around the x axis.\n\nReturn the (4x4) Transformation matrix for a rotation about the x axis by the defined angle.\n\nThe matrix is:\n\n[ 1         0            0          0]\n[ 0     cos(angle)  -sin(angle)     0]\n[ 0     sin(angle)   cos(angle)     0]\n[ 0         0            0          1]\n\nArguments:\n\nangle: rotation angle defined in radians\n\nOutput:\n\nrx: (4x4) Transformation matrix.\n\nExamples:\n\njulia> rz = vecrotx(angle)\n\nRotate the NURBS line [0.0;0.0;0.0] - [3.0;3.0;3.0] by 45 degrees around the x-axis\n\njulia> line = nrbline(vec([0.0 0.0 0.0]),vec([3.0 3.0 3.0]));\njulia> rotate = vecrotx(pi/4);\njulia> rline = nrbtform(line, rotate)\n\nReference\n\nsee also: nrbtform\n\n\n\n\n\n","category":"function"},{"location":"api_NURBStoolbox/#MagMechFEM_Matlab2Julia.NURBStoolbox.vecroty","page":"NURBS Toolbox","title":"MagMechFEM_Matlab2Julia.NURBStoolbox.vecroty","text":"vecroty(angle::F)::Matrix{F} where {F<:AbstractFloat}\n\nTransformation matrix for a rotation around the y axis.\n\nReturn the (4x4) Transformation matrix for a rotation about the y axis by the defined angle.\n\nThe matrix is:\n\n[  cos(angle)       0        sin(angle)       0]\n[      0            1            0            0]\n[ -sin(angle)       0        cos(angle)       0]\n[      0            0            0            1]\n\nArguments:\n\nangle: rotation angle defined in radians\n\nOutput:\n\nry: (4x4) Transformation matrix.\n\nExamples:\n\njulia> ry = vecroty(angle)\n\nRotate the NURBS line [0.0;0.0;0.0] - [3.0;3.0;3.0] by 45 degrees around the y-axis\n\njulia> line = nrbline(vec([0.0 0.0 0.0]),vec([3.0 3.0 3.0]));\njulia> rotate = vecroty(pi/4);\njulia> rline = nrbtform(line, rotate)\n\nReference\n\nsee also: nrbtform\n\n\n\n\n\n","category":"function"},{"location":"api_NURBStoolbox/#MagMechFEM_Matlab2Julia.NURBStoolbox.vecrotz","page":"NURBS Toolbox","title":"MagMechFEM_Matlab2Julia.NURBStoolbox.vecrotz","text":"vecrotz(angle::F)::Matrix{F} where {F<:AbstractFloat}\n\nTransformation matrix for a rotation around the z axis.\n\nReturn the (4x4) Transformation matrix for a rotation about the z axis by the defined angle.\n\nThe matrix is:\n\n[  cos(angle)  -sin(angle)       0          0]\n[ -sin(angle)   cos(angle)       0          0]\n[      0            0            1          0]\n[      0            0            0          1]\n\nArguments:\n\nangle: rotation angle defined in radians\n\nOutput:\n\nrz: (4x4) Transformation matrix.\n\nExamples:\n\njulia> rz = vecrotz(angle)\n\nRotate the NURBS line [0.0;0.0;0.0] - [3.0;3.0;3.0] by 45 degrees around the z-axis\n\njulia> line = nrbline(vec([0.0 0.0 0.0]),vec([3.0 3.0 3.0]));\njulia> rotate = vecrotz(pi/4);\njulia> rline = nrbtform(line, rotate)\n\nReference\n\nsee also: nrbtform\n\n\n\n\n\n","category":"function"},{"location":"api_NURBStoolbox/#MagMechFEM_Matlab2Julia.NURBStoolbox.nrbtform","page":"NURBS Toolbox","title":"MagMechFEM_Matlab2Julia.NURBStoolbox.nrbtform","text":"nrbtform(nurbs::NURBS{I,F},tmat::Matrix{F}\n        )::NURBS{I,F} where {I<:Integer,F<:AbstractFloat}\n\nApply transformation matrix to the NURBS.\n\nThe NURBS is transform as defined a transformation matrix of size (4,4), such as a rotation, translation or change in scale. The transformation matrix can define a single transformation or multiple series of transformations. The matrix can be simple constructed by the functions vecscale, vectrans, vecrotx, vecroty and vecrotz.\n\nArguments:\n\nnurbs: NURBS data structure (see nrbmak for details).\ntmatrix: Transformation matrix, a matrix of size (4,4) defining a single or multiple transformations.\n\nOutput:\n\ntnurbs: The transformed NURBS data structure.\n\nExamples:\n\njulia> tnurbs = nrbtform(nurbs,tmatrix)\n\nRotate a square by 45 degrees about the z axis.\n\njulia> rsqr = nrbtform(nrbrect(), vecrotz(deg2rad(45)));\njulia> nrbplot(rsqr,[10;10])\n\nReference\n\nsee also: vecscale, vectrans, vecrotx, vecroty and vecrotz\n\n\n\n\n\n","category":"function"},{"location":"api_NURBStoolbox/#MagMechFEM_Matlab2Julia.NURBStoolbox.nrbextrude","page":"NURBS Toolbox","title":"MagMechFEM_Matlab2Julia.NURBStoolbox.nrbextrude","text":"nrbextrude(curve::NURBS1D{I,F},vector::Vector{F}\n          )::NURBS2D{I,F} where {I<:Integer,F<:AbstractFloat}\n\nConstruct a NURBS surface by extruding a NURBS curve.\n\nConstructs a NURBS surface by extruding a NURBS curve along a defined vector. The NURBS curve forms the U direction of the surface edge, and extruded along the vector in the V direction. Note NURBS surfaces cannot be extruded.\n\nArguments:\n\ncrv: NURBS curve to extrude, see nrbmak.\nvec: Vector along which the curve is extruded.\n\nOutput:\n\nsrf: NURBS surface constructed.\n\nExamples:\n\njulia> srf = nrbextrude(crv,vec)\n\nForm a hollow cylinder by extruding a circle along the z-axis.\n\nsrf = nrbextrude(nrbcirc(),[0.0;0.0;1.0]);\n\n\n\n\n\n","category":"function"},{"location":"api_NURBStoolbox/#MagMechFEM_Matlab2Julia.NURBStoolbox.nrbrevolve","page":"NURBS Toolbox","title":"MagMechFEM_Matlab2Julia.NURBStoolbox.nrbrevolve","text":"nrbrevolve(crv::NURBS1D{I,F},vec::Vector{F},\n           pnt::Vector{F}=[0.0;0.0;0.0],theta::F=2.0*π\n          )::NURBS2D{I,F} where {I<:Integer,F<:AbstractFloat}\n\nConstruct a NURBS surface by revolving the profile NURBS curve around an axis defined by a point and vector.\n\nArguments:\n\ncrv: NURBS curve to revolve, see nrbmak.\nvec: Vector defining the direction of the rotation axis.\npnt: Coordinate of the point used to define the axis of rotation.\ntheta: Angle to revolve the curve, default 2*π.\n\nOutput:\n\nsrf: Constructed surface.\n\nExamples:\n\njulia> srf = nrbrevolve(crv,vec)\njulia> srf = nrbrevolve(crv,vec,pnt)\njulia> srf = nrbrevolve(crv,vec,pnt,ang)\n\nConstruct a sphere by rotating a semicircle around a x-axis.\n\njulia> crv = nrbcirc(1.0,[0.0;0.0;0.0],0.0,pi);\njulia> srf = nrbrevolve(crv,[1.0;0.0;0.0],[0.0;0.0;0.0]);\njulia> nrbplot(srf,[20;20]);\n\nThe algorithm:\n\nvectrans the point to the origin [0.0;0.0;0.0]\nrotate the vector into alignment with the z-axis\nfor each control point along the curve\ndetermine the radius and angle of control point to the z-axis\nconstruct a circular arc in the x-y plane with this radius and start angle and sweep angle theta\ncombine the arc and profile, coefs and weights.\nnext control point\nrotate and vectrans the surface back into position by reversing 1 and 2.\n\n\n\n\n\n","category":"function"},{"location":"api_NURBStoolbox/#MagMechFEM_Matlab2Julia.NURBStoolbox.vecdot","page":"NURBS Toolbox","title":"MagMechFEM_Matlab2Julia.NURBStoolbox.vecdot","text":"vecdot(vec1::Matrix{F},vec2::Matrix{F})::Matrix{F} where {F<:AbstractFloat}\n\nor\n\nvecdot(vec1::Vector{F},vec2::Vector{F})::F where {F<:AbstractFloat}\n\nDetermines scalar dot product of two vectors.\n\nArguments:\n\nvec1, vec2: An array of column vectors represented by a matrix of size (dim,nv), where dim is the dimension of the vector and nv the number of vectors.\n\nOutput:\n\ndot: Row vector of scalars, each element corresponding to the dot product of the respective components in vec1 and vec2.\n\nExamples:\n\njulia> dot = vecdot(vec2,vec2)\n\nDetermine the dot product of\n\n[2.3;3.4;5.6] and [1.2;4.5;1.2]\n[5.1;0.0;2.3] and [2.5;3.2;4.0]\n\njulia> dot = vecdot([2.3 5.1; 3.4 0.0; 5.6 2.3],[1.2 2.5; 4.5 3.2; 1.2 4.0])\n\n\n\n\n\n","category":"function"},{"location":"api_NURBStoolbox/#MagMechFEM_Matlab2Julia.NURBStoolbox.veccross","page":"NURBS Toolbox","title":"MagMechFEM_Matlab2Julia.NURBStoolbox.veccross","text":"veccross(vec1::Matrix{F},vec2::Matrix{F}\n        )::Matrix{F} where {F<:AbstractFloat}\n\nor\n\nveccross(vec1::Vector{F},vec2::Vector{F}\n        )::Vector{F} where {F<:AbstractFloat}\n\nDetermines cross product of two vectors.\n\nArguments:\n\nvec1, vec2: An array of column vectors represented by a matrix of size (dim,nv), where dim is the dimension of the vector and nv the number of vectors.\n\nOutput:\n\ncross: Array of column vectors, each element is corresponding to the cross product of the respective components in vec1 and vec2.\n\nExamples:\n\njulia> cross = veccross(vec2,vec2)\n\nDetermine the cross product of\n\n[2.3;3.4;5.6] and [1.2;4.5;1.2]\n[5.1;0.0;2.3] and [2.5;3.2;4.0]\n\njulia> cross=veccross([2.3 5.1; 3.4 0.0; 5.6 2.3],[1.2 2.5; 4.5 3.2; 1.2 4.0])\n\n\n\n\n\n","category":"function"},{"location":"api_NURBStoolbox/#MagMechFEM_Matlab2Julia.NURBStoolbox.vecmag","page":"NURBS Toolbox","title":"MagMechFEM_Matlab2Julia.NURBStoolbox.vecmag","text":"vecmag(vec::Matrix{F})::Matrix{F} where {F<:AbstractFloat}\n\nor\n\nvecmag(vec::Vector{F})::F where {F<:AbstractFloat}\n\nDetermines the magnitude of vectors.\n\nArguments:\n\nvec: An array of column vectors represented by a matrix of size (dim,nv), where dim is the dimension of the vector and nv the number of vectors.\n\nOutput:\n\nmvec: Magnitude of the vectors, vector of size (1,nv).\n\nExamples:\n\njulia> mvec = vecmag(vec)\n\nFind the magnitude of the two vectors [0.0;2.0;1.3] and [1.5;3.4;2.3].\n\njulia> mvec = vecmag([0.0 1.5; 2.0 3.4; 1.3 2.3])\n\n\n\n\n\n","category":"function"},{"location":"api_NURBStoolbox/#MagMechFEM_Matlab2Julia.NURBStoolbox.vecmag2","page":"NURBS Toolbox","title":"MagMechFEM_Matlab2Julia.NURBStoolbox.vecmag2","text":"vecmag2(vec::Matrix{F})::Matrix{F} where {F<:AbstractFloat}\n\nor\n\nvecmag2(vec::Vector{F})::F where {F<:AbstractFloat}\n\nDetermines the squared magnitude of vectors.\n\nArguments:\n\nvec: An array of column vectors represented by a matrix of size (dim,nv), where dim is the dimension of the vector and nv the number of vectors.\n\nOutput:\n\nmvec: Squared magnitude of the vectors, vector of size (1,nv).\n\nExamples:\n\njulia> mvec = vecmag2(vec)\n\nFind the squared magnitude of the two vectors [0.0;2.0;1.3] and [1.5;3.4;2.3].\n\njulia> mvec = vecmag2([0.0 1.5; 2.0 3.4; 1.3 2.3])\n\n\n\n\n\n","category":"function"},{"location":"api_NURBStoolbox/#MagMechFEM_Matlab2Julia.NURBStoolbox.vecnorm_toolbox","page":"NURBS Toolbox","title":"MagMechFEM_Matlab2Julia.NURBStoolbox.vecnorm_toolbox","text":"vecnorm_toolbox(vec::Union{Matrix{F}, Array{F,3}}\n               )::Union{Matrix{F}, Array{F,3}} where {F<:AbstractFloat}\n\nor\n\nvecnorm_toolbox(vec::Vector{F})::Vector{F} where {F<:AbstractFloat}\n\nNormalises the array of vectors, returning the unit vectors.\n\nArguments:\n\nvec: An array of column vectors represented by a matrix of size (dim,nv), where dim is the dimension of the vector and nv the number of vectors.\n\nOutput:\n\nnvec: Normalised vectors, matrix the same size as vec.\n\nExamples:\n\njulia> nvec = vecnorm_toolbox(vec)\n\nNormalise the two vectors [0.0;2.0;1.3] and [1.5;3.4;2.3].\n\njulia> nvec = vecnorm_toolbox([0.0 1.5; 2.0 3.4; 1.3 2.3])\n\n\n\n\n\n","category":"function"},{"location":"api_NURBStoolbox/#MagMechFEM_Matlab2Julia.NURBStoolbox.vecangle","page":"NURBS Toolbox","title":"MagMechFEM_Matlab2Julia.NURBStoolbox.vecangle","text":"vecangle(num::Matrix{F},den::Matrix{F}\n        )::Matrix{F} where {F<:AbstractFloat}\n\nor\n\nvecangle(num::F,den::F)::Vector{F} where {F<:AbstractFloat}\n\nAn alternative to atan, returning an arctangent in the range 0 to 2*π.\n\nThe components of the vector ang are the arctangent of the corresponding enties of num./den. This function is an alternative for atan, returning an angle in the range 0 to 2*π.\n\nArguments:\n\nnum: Numerator, vector of size (1,nv).\nden: Denominator, vector of size (1,nv).\n\nOutput:\n\nang: Arctangents, row vector of angles.\n\nExamples:\n\njulia> ang = vecmag2(num,dum)\n\nFind the atan(1.2,2.0) and atan(1.5,3.4) using vecangle.\n\njulia> ang = vecangle([1.2 1.5], [2.0 3.4])\n\n\n\n\n\n","category":"function"},{"location":"api_NURBStoolbox/#MagMechFEM_Matlab2Julia.NURBStoolbox.nrbtransp","page":"NURBS Toolbox","title":"MagMechFEM_Matlab2Julia.NURBStoolbox.nrbtransp","text":"nrbtransp(srf::NURBS2D{I,F}\n         )::NURBS2D{I,F} where {I<:Integer,F<:AbstractFloat}\n\nTranspose a NURBS surface, by swapping U and V directions.\n\nUtility function that transposes a NURBS surface, by swapping U and V directions. NURBS curves cannot be transposed.\n\nArguments:\n\nsrf: NURBS surface, see nrbmak.\n\nOutput:\n\ntsrf: NURBS surface with U and V diretions transposed.\n\nExamples:\n\njulia> tsrf = nrbtransp(srf)\n\n\n\n\n\n","category":"function"},{"location":"api_NURBStoolbox/#MagMechFEM_Matlab2Julia.NURBStoolbox.bspdegelev","page":"NURBS Toolbox","title":"MagMechFEM_Matlab2Julia.NURBStoolbox.bspdegelev","text":"bspdegelev(d::I,c::Matrix{F},k::Vector{F},t::I\n          ) where {I<:Integer,F<:AbstractFloat}\n\nDegree elevate a univariate B-Spline.\n\nArguments:\n\nd: Degree of the B-Spline.\nc: Control points, matrix of size (dim,nc).\nk: Knot sequence, vector of size nk.\nt: Raise the B-Spline degree t times.\n\nOutput:\n\nic: Control points of the new B-Spline.\nik: Knot vector of the new B-Spline.\n\nExamples:\n\njulia> ic,ik = bspdegelev(d,c,k,t)\n\nReference:\n\nAlgorithm A5.9 from 'The NURBS BOOK' pg206 (Les Piegl , Wayne Tiller  (1997))\n\n\n\n\n\n","category":"function"},{"location":"api_NURBStoolbox/#MagMechFEM_Matlab2Julia.NURBStoolbox.nrbdegelev","page":"NURBS Toolbox","title":"MagMechFEM_Matlab2Julia.NURBStoolbox.nrbdegelev","text":"nrbdegelev(nurbs::NURBS{I,F},ntimes::Union{I, Vector{I}}\n          )::NURBS{I,F} where {I<:Integer,F<:AbstractFloat}\n\nDegree elevates the NURBS curve or surface. This function uses the B-Spline function bspdegelev.\n\nArguments:\n\nnurbs: NURBS structure (curve or surface see nrbmak)\nntimes: number or pair of numbers indicating how many times the structure shall be degree elevated along U direction or V direction\n\nOutput:\n\nenurbs: new NURBS structure with degrees elevated\n\nExamples:\n\njulia> ecrv = nrbdegelev(crv,utimes);\njulia> esrf = nrbdegelev(srf,[utimes;vtimes]);\n\nIncrease the NURBS surface degree twice along the V direction.\n\njulia> esrf = nrbdegelev(srf,[0;2]);\n\nReference\n\nsee also: bspdegelev\n\n\n\n\n\n","category":"function"},{"location":"api_NURBStoolbox/#MagMechFEM_Matlab2Julia.NURBStoolbox.bspkntins","page":"NURBS Toolbox","title":"MagMechFEM_Matlab2Julia.NURBStoolbox.bspkntins","text":"bspkntins(d::I,c::Matrix{F},k::Vector{F},u::Vector{F}\n         ) where {I<:Integer,F<:AbstractFloat}\n\nInsert knots into a univariate B-Spline.\n\nArguments:\n\nd: Degree of the B-Spline.\nc: Control points, matrix of size (dim,nc).\nk: Knot sequence, vector of size nk.\nu: Row vector of knots to be inserted, size nu.\n\nOutput:\n\nic: Control points of the new B-Spline, of size (dim,nc+nu).\nik: Knot vector of the new B-Spline, of size (nk+nu).\n\nExamples:\n\njulia> ic,ik = bspkntins(d,c,k,u)\n\nReference:\n\nAlgorithm A5.4 from 'The NURBS BOOK' pg164 (Les Piegl , Wayne Tiller  (1997))\n\n\n\n\n\n","category":"function"},{"location":"api_NURBStoolbox/#MagMechFEM_Matlab2Julia.NURBStoolbox.nrbkntins","page":"NURBS Toolbox","title":"MagMechFEM_Matlab2Julia.NURBStoolbox.nrbkntins","text":"nrbkntins(nurbs::NURBS{I,F}, iknots::Union{Vector{F}, Vector{Vector{F}}}\n         )::NURBS{I,F} where {I<:Integer,F<:AbstractFloat}\n\nInsert a single or multiple knots into a NURBS curve or surface.\n\nInserts knots into the NURBS data structure, these can be knots at new positions or at the location of existing knots to increase the multiplicity. Note that the knot multiplicity cannot be increased beyond the order of the spline. Knots along the V direction can only inserted into NURBS surfaces, not curves that are always defined along the U direction. This function uses the B-Spline function bspkntins.\n\nArguments:\n\nnurbs: NURBS structure (curve or surface see nrbmak)\niknots: vektor of knots or pair of vector of knots to insert into respective U,V directions of the structure\n\nOutput:\n\nenurbs: new NURBS structure with degrees elevated\n\nExamples:\n\njulia> icrv = nrbkntins(crv,iknots);\njulia> isrf = nrbkntins(srf,[iuknots,ivknots]);\n\ninfo: Note:\nNo knot multiplicity will be increased beyond the order of the spline.\n\nInsert two knots into a curve, one at 0.3 and another twice at 0.4.\n\njulia> icrv = nrbkntins(crv, vec([0.3 0.4 0.4]))\n\nInsert into a surface two knots as (1) into the U knot sequence and one knot into the V knot sequence at 0.5.\n\njulia> isrf = nrbkntins(srf, [vec([0.3 0.4 0.4]),[0.5]])\n\nReference\n\nsee also: bspkntins\n\n\n\n\n\n","category":"function"},{"location":"api_NURBStoolbox/#MagMechFEM_Matlab2Julia.NURBStoolbox.bspderiv","page":"NURBS Toolbox","title":"MagMechFEM_Matlab2Julia.NURBStoolbox.bspderiv","text":"bspderiv(d::I,c::Matrix{F},k::Vector{F}\n        ) where {I<:Integer,F<:AbstractFloat}\n\nEvaluate the control points and knot sequence of the derivative of a univariate B-Spline.\n\nArguments:\n\nd: Degree of the B-Spline.\nc: Control points, matrix of size (dim,nc).\nk: Knot sequence, vector of size nk.\n\nOutput:\n\ndc: Control points of the derivative.\ndk: Knot sequence of the derivative.\n\nExamples:\n\njulia> dc,dk = bspderiv(d,c,k)\n\nReference:\n\nderived from Algorithm A3.3 from 'The NURBS BOOK' pg98 (Les Piegl , Wayne Tiller  (1997))\n\n\n\n\n\n","category":"function"},{"location":"api_NURBStoolbox/#MagMechFEM_Matlab2Julia.NURBStoolbox.nrbderiv","page":"NURBS Toolbox","title":"MagMechFEM_Matlab2Julia.NURBStoolbox.nrbderiv","text":"nrbderiv(nurbs::NURBS{I,F}) where {I<:Integer,F<:AbstractFloat}\n\nConstruct the first derivative representation of a NURBS curve or surface.\n\nThe derivatives of a B-Spline are themselves a B-Spline of lower degree, giving an efficient means of evaluating multiple derivatives. However, although the same approach can be applied to NURBS, the situation for NURBS is more complex. I have at present restricted the derivatives to just the first. I don't claim that this implentation is the best approach, but it will have to do for now. The function returns a data struture that for a NURBS curve contains the first derivatives of the B-Spline representation. Remember that a NURBS curve is represented by a univariate B-Spline using the homogeneous coordinates. The derivative data structure can be evaluated later with the function nrbdeval.\n\nArguments:\n\nnurbs: NURBS data structure, see nrbmak.\n\nOutput:\n\ndnurbs: A data structure that represents the first derivatives of a NURBS curve or surface.\n\nExamples:\n\njulia> dnurbs = nrbderiv(nurbs);\n\nSee the function nrbdeval for an example.\n\nReference\n\nsee also: bspderiv, nrbdeval\n\n\n\n\n\n","category":"function"},{"location":"api_NURBStoolbox/#MagMechFEM_Matlab2Julia.NURBStoolbox.nrbdeval","page":"NURBS Toolbox","title":"MagMechFEM_Matlab2Julia.NURBStoolbox.nrbdeval","text":"nrbdeval(nurbs::NURBS{I,F},\n         dnurbs::Union{NURBS1D{I,F}, Vector{NURBS2D{I,f}}},\n         tt::Union{Vector{F}, Vector{Vector{F}}, Matrix{F}}\n        ) where {I<:Integer,F<:AbstractFloat}\n\nEvaluation of the derivative NURBS curve or surface.\n\nArguments:\n\nnurbs: NURBS structure\ndnurbs: NURBS derivative representation of nurbs\ntt: parametric evaluation points either as Vector{F} or Vector{Vector{F}}\n\nOutput:\n\npnt::Union{Matrix{F},Array{F,3}}: Evaluated points.\njac::Union{Matrix{F}, Vector{Array{F,3}}}: Evaluated first derivatives (Jacobian).\n\nExamples:\n\njulia> pnt, jac = nrbdeval(nurbs, dnurbs, tt)\njulia> pnt, jac = nrbdeval(nurbs, dnurbs, [tu,tv])\n\nDetermine the first derivatives a NURBS curve at 9 points for 0.0 to 1.0.\n\njulia> tt = collect(range(0.0, 1.0, length=9));\njulia> dcrv = nrbderiv(crv);\njulia> pnts, jac = nrbdeval(crv, dcrv, tt)\n\nReference\n\nsee also: nrbeval, nrbderiv\n\n\n\n\n\n","category":"function"},{"location":"api_NURBStoolbox/#MagMechFEM_Matlab2Julia.NURBStoolbox.nrbreverse","page":"NURBS Toolbox","title":"MagMechFEM_Matlab2Julia.NURBStoolbox.nrbreverse","text":"nrbreverse(nurbs::NURBS{I,F}\n        )::NURBS{I,F} where {I<:Integer,F<:AbstractFloat}\n\nUtility function to reverse the evaluation direction of a NURBS curve or surface.\n\nArguments:\n\nnurbs: NURBS data structure (see nrbmak for details).\n\nOutput:\n\nrnurbs: The transformed NURBS data structure.\n\nExamples:\n\njulia> rnurbs = nrbreverse(nurbs)\n\n\n\n\n\n","category":"function"},{"location":"api_NURBStoolbox/#MagMechFEM_Matlab2Julia.NURBStoolbox.nrbruled","page":"NURBS Toolbox","title":"MagMechFEM_Matlab2Julia.NURBStoolbox.nrbruled","text":"nrbruled(crv1::NURBS1D{I,F},crv2::NURBS1D{I,F}\n        )::NURBS2D{I,F} where {I<:Integer,F<:AbstractFloat}\n\nConstructs a ruled surface between two NURBS curves. The ruled surface is ruled along the V direction.\n\nArguments:\n\ncrv1: First NURBS curve, see nrbmak.\ncrv2: Second NURBS curve, see nrbmak.\n\nOutput:\n\nsrf: Ruled NURBS surface.\n\nExamples:\n\njulia> srf = nrbruled(crv1,crv2)\n\nConstruct a ruled surface between a semicircle and a straight line.\n\njulia> cir = nrbcirc(1.0,[0.0;0.0;0],0.0,1.0*pi);\njulia> line = nrbline(vec([-1 0.5 1]),vec([1 0.5 1]));\njulia> srf = nrbruled(cir,line);\njulia> nrbplot(srf,[20;20]);\n\n\n\n\n\n","category":"function"},{"location":"api_NURBStoolbox/#MagMechFEM_Matlab2Julia.NURBStoolbox.nrbcoons","page":"NURBS Toolbox","title":"MagMechFEM_Matlab2Julia.NURBStoolbox.nrbcoons","text":"nrbcoons(u1::NURBS1D{I,F},u2::NURBS1D{I,F},\n         v1::NURBS1D{I,F},v2::NURBS1D{I,F}\n        )::NURBS2D{I,F} where {I<:Integer,F<:AbstractFloat}\n\nConstruction of a Coons patch.\n\nConstruction of a bilinearly blended Coons surface patch from four NURBS curves that define the boundary.\n\nThe orientation of the four NURBS boundary curves.\n\n   ^ V direction\n   |\n   |      u2\n   ------->--------\n   |              |\n   |              |\nv1 ^   Surface    ^ v2\n   |              |\n   |              |\n   ------->-----------> U direction\n          u1\n\nArguments:\n\nu1: NURBS curve defining the bottom U direction boundary of the constructed NURBS surface.\nu2: NURBS curve defining the top U direction boundary of the constructed NURBS surface.\nv1: NURBS curve defining the bottom V direction boundary of the constructed NURBS surface.\nv1: NURBS curve defining the top V direction boundary of the constructed NURBS surface.\n\nOutput:\n\nsrf: Coons NURBS surface patch.\n\nExamples:\n\njulia> srf = nrbcoons(u1, u2, v1, v2)\n\nDefine four NURBS curves and construct a Coons surface patch.\n\njulia> pnts = [0.0  3.0  4.5  6.5 8.0 10.0;\n               0.0  0.0  0.0  0.0 0.0  0.0;\n               2.0  2.0  7.0  4.0 7.0  9.0];\njulia> crv1 = nrbmak(pnts, vec([0 0 0 1/3 0.5 2/3 1 1 1]));\njulia> pnts= [ 0.0  3.0  5.0  8.0 10.0;\n              10.0 10.0 10.0 10.0 10.0;\n               3.0  5.0  8.0  6.0 10.0];\njulia> crv2 = nrbmak(pnts, vec([0 0 0 1/3 2/3 1 1 1]));\njulia> pnts= [0.0 0.0 0.0  0.0;\n              0.0 3.0 8.0 10.0;\n              2.0 0.0 5.0  3.0];\njulia> crv3 = nrbmak(pnts, vec([0 0 0 0.5 1 1 1]));\njulia> pnts= [10.0 10.0 10.0 10.0 10.0;\n               0.0   3.0  5.0  8.0 10.0;\n               9.0   7.0  7.0 10.0 10.0];\njulia> crv4 = nrbmak(pnts, vec([0 0 0 0.25 0.75 1 1 1]));\njulia> srf = nrbcoons(crv1, crv2, crv3, crv4);\njulia> nrbplot(srf,[20;20]);\n\n\n\n\n\n","category":"function"},{"location":"api_NURBStoolbox/#Recipes-for-NURBS-Structures","page":"NURBS Toolbox","title":"Recipes for NURBS Structures","text":"","category":"section"},{"location":"api_NURBStoolbox/","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"nrbline\nnrbrect\nnrb4surf\nnrbcirc\nnrbcylind","category":"page"},{"location":"api_NURBStoolbox/#MagMechFEM_Matlab2Julia.NURBStoolbox.nrbline","page":"NURBS Toolbox","title":"MagMechFEM_Matlab2Julia.NURBStoolbox.nrbline","text":"nrbline()::NURBS1D\n\nor\n\nnrbline(p1::Vector{F},p2::Vector{F})::NURBS1D where {F<:AbstractFloat}\n\nConstruct a straight line.\n\nConstructs NURBS data structure for a straight line. If coordinates are included the function returns a unit straight line along the x-axis.\n\nArguments:\n\np1: 2D or 3D cartesian coordinate of the start point.\np2: 2D or 3D cartesian coordinate of the end point.\n\nOutput:\n\ncrv: NURBS curve for a straight line.\n\nExamples:\n\njulia> crv = nrbline()\njulia> crv = nrbline(p1,p2)\n\n\n\n\n\n","category":"function"},{"location":"api_NURBStoolbox/#MagMechFEM_Matlab2Julia.NURBStoolbox.nrbrect","page":"NURBS Toolbox","title":"MagMechFEM_Matlab2Julia.NURBStoolbox.nrbrect","text":"nrbrect()::NURBS1D\n\nor\n\nnrbrect(size::F)::NURBS1D where {F<:AbstractFloat}\n\nor\n\nnrbrect(width::F,height::F)::NURBS1D where {F<:AbstractFloat}\n\nConstruct NURBS representation of a rectangle.\n\nConstruct a rectangle or square in the x-y plane with the bottom corner at (0,0,0). If there are no arguments provided the function constructs a unit square.\n\nArguments:\n\nsize: Size of the square (width = height).\nwidth: Width of the rectangle (along x-axis).\nheight: Height of the rectangle (along y-axis).\n\nOutput:\n\ncrv: NURBS curve for a straight line.\n\nExamples:\n\njulia> crv = nrbrect()\njulia> crv = nrbrect(size)\njulia> crv = nrbrect(width, height)\n\n\n\n\n\n","category":"function"},{"location":"api_NURBStoolbox/#MagMechFEM_Matlab2Julia.NURBStoolbox.nrb4surf","page":"NURBS Toolbox","title":"MagMechFEM_Matlab2Julia.NURBStoolbox.nrb4surf","text":"nrb4surf(p11::Vector{F},p12::Vector{F},p21::Vector{F},p22::Vector{F}\n        )::NURBS2D where {F<:AbstractFloat}\n\nConstructs a bilinear surface defined by four coordinates.\n\nThe position of the corner points\n\n^ V direction\n|\n----------------\n|p21        p22|\n|              |\n|    SRF       |\n|              |\n|p11        p12|\n-------------------> U direction\n\nArguments:\n\np11: Cartesian coordinate of the lhs bottom corner point.\np12: Cartesian coordinate of the rhs bottom corner point.\np21: Cartesian coordinate of the lhs top corner point.\np22: Cartesian coordinate of the rhs top corner point.\n\nOutput:\n\nsrf: NURBS bilinear surface, see nrbmak.\n\nExamples:\n\njulia> srf = nrb4surf(p11,p12,p21,p22)\n\n\n\n\n\n","category":"function"},{"location":"api_NURBStoolbox/#MagMechFEM_Matlab2Julia.NURBStoolbox.nrbcirc","page":"NURBS Toolbox","title":"MagMechFEM_Matlab2Julia.NURBStoolbox.nrbcirc","text":"nrbcirc(radius::F=1.0,center::Vector{F}=[0.0;0.0;0.0],\n        sang::F=0.0,eang::F=2.0*π)::NURBS1D where {F<:AbstractFloat}\n\nConstructs NURBS data structure for a circular arc in the x-y plane. If no arguments are supplied a unit circle with center [0.0;0.0] is constructed.\n\nAngles are defined as positive in the anti-clockwise direction.\n\nArguments:\n\nradius: Radius of the circle, default 1.0\ncenter: Center of the circle, default [0.0;0.0;0.0]\nsang: Start angle, default 0 degrees\neang: End angle 360 degrees\n\nOutput:\n\ncrv: NURBS curve for a circular arc.\n\nExamples:\n\njulia> crv = nrbcirc()\njulia> crv = nrbcirc(radius)\njulia> crv = nrbcirc(radius,center)\njulia> crv = nrbcirc(radius,center,sang,eang)\n\n\n\n\n\n","category":"function"},{"location":"api_NURBStoolbox/#MagMechFEM_Matlab2Julia.NURBStoolbox.nrbcylind","page":"NURBS Toolbox","title":"MagMechFEM_Matlab2Julia.NURBStoolbox.nrbcylind","text":"nrbcylind(height::F=1.0,radius::F=1.0,center::Vector{F}=[0.0;0.0;0.0],\n          sang::F=0.0,eang::F=2.0*π)::NURBS2D where {F<:AbstractFloat}\n\nConstruct a cylinder or cylindrical patch by extruding a circular arc (see nrbcirc).\n\nArguments:\n\nheight: Height of the cylinder along the axis, default 1.0.\nradius: Radius of the circle, default 1.0.\ncenter: Center of the circle, default [0.0;0.0;0.0]\nsang: Start angle relative to the origin, default 0.0.\neang: End angle relative to the origin, default 2.0*π.\n\nOutput:\n\nsrf: NURBS surface of a extruded circular arc.\n\nExamples:\n\njulia> crv = nrbcylind()\njulia> crv = nrbcylind(height,radius)\njulia> crv = nrbcylind(height,radius)\njulia> crv = nrbcylind(height,radius,center)\njulia> crv = nrbcylind(height,radius,center,sang,eang)\n\nReferences:\n\nsee also nrbcirc\n\n\n\n\n\n","category":"function"},{"location":"api_NURBStoolbox/#Test/Demo-Functions/Methods","page":"NURBS Toolbox","title":"Test/Demo Functions/Methods","text":"","category":"section"},{"location":"api_NURBStoolbox/","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"nrbtestcrv\nnrbtestsrf\ndemoline\ndemorect\ndemocirc\ndemoellip\ndemocurve\ndemohelix\ndemocylind\ndemotorus\ndemorevolve\ndemodegelev\ndemokntins\ndemodercrv\ndemodersrf\ndemoruled\ndemocoons\ndemo4surf\ndemogeom","category":"page"},{"location":"api_NURBStoolbox/#MagMechFEM_Matlab2Julia.NURBStoolbox.nrbtestcrv","page":"NURBS Toolbox","title":"MagMechFEM_Matlab2Julia.NURBStoolbox.nrbtestcrv","text":"nrbtestcrv()::NURBS1D\n\nConstruct a simple test curve.\n\nOutput:\n\ncrv NURBS data structure of a curve\n\nExamples:\n\njulia> crv = nrbtestcrv()\n\n\n\n\n\n","category":"function"},{"location":"api_NURBStoolbox/#MagMechFEM_Matlab2Julia.NURBStoolbox.nrbtestsrf","page":"NURBS Toolbox","title":"MagMechFEM_Matlab2Julia.NURBStoolbox.nrbtestsrf","text":"nrbtestsrf()::NURBS2D\n\nConstruct a simple test surface.\n\nOutput:\n\nsrf: NURBS data structure of a surface\n\nExamples:\n\njulia> srf = nrbtestsrf()\n\n\n\n\n\n","category":"function"},{"location":"api_NURBStoolbox/#MagMechFEM_Matlab2Julia.NURBStoolbox.demoline","page":"NURBS Toolbox","title":"MagMechFEM_Matlab2Julia.NURBStoolbox.demoline","text":"demoline()\n\nDemonstration of a 3D straight line\n\nExamples:\n\njulia> demoline()\n\n\n\n\n\n","category":"function"},{"location":"api_NURBStoolbox/#MagMechFEM_Matlab2Julia.NURBStoolbox.demorect","page":"NURBS Toolbox","title":"MagMechFEM_Matlab2Julia.NURBStoolbox.demorect","text":"demorect()\n\nDemonstrate of rectangluar curve.\n\nExamples:\n\njulia> demorect()\n\n\n\n\n\n","category":"function"},{"location":"api_NURBStoolbox/#MagMechFEM_Matlab2Julia.NURBStoolbox.democirc","page":"NURBS Toolbox","title":"MagMechFEM_Matlab2Julia.NURBStoolbox.democirc","text":"democirc()\n\nDemonstration of a circle arcs in the x-y plane.\n\nExamples:\n\njulia> democirc()\n\n\n\n\n\n","category":"function"},{"location":"api_NURBStoolbox/#MagMechFEM_Matlab2Julia.NURBStoolbox.demoellip","page":"NURBS Toolbox","title":"MagMechFEM_Matlab2Julia.NURBStoolbox.demoellip","text":"demoellip()\n\nDemonstration of a unit circle transformed to a inclined ellipse by first scaling, then rotating and finally translating.\n\nExamples:\n\njulia> demoellip()\n\n\n\n\n\n","category":"function"},{"location":"api_NURBStoolbox/#MagMechFEM_Matlab2Julia.NURBStoolbox.democurve","page":"NURBS Toolbox","title":"MagMechFEM_Matlab2Julia.NURBStoolbox.democurve","text":"democurve()\n\nShows two simple test curves.\n\nExamples:\n\njulia> democurve()\n\n\n\n\n\n","category":"function"},{"location":"api_NURBStoolbox/#MagMechFEM_Matlab2Julia.NURBStoolbox.demohelix","page":"NURBS Toolbox","title":"MagMechFEM_Matlab2Julia.NURBStoolbox.demohelix","text":"demohelix()\n\nDemonstration of a 3D helical curve.\n\nExamples:\n\njulia> demohelix()\n\n\n\n\n\n","category":"function"},{"location":"api_NURBStoolbox/#MagMechFEM_Matlab2Julia.NURBStoolbox.democylind","page":"NURBS Toolbox","title":"MagMechFEM_Matlab2Julia.NURBStoolbox.democylind","text":"democylind()\n\nDemonstration of the construction of a cylinder.\n\nExamples:\n\njulia> democylind()\n\n\n\n\n\n","category":"function"},{"location":"api_NURBStoolbox/#MagMechFEM_Matlab2Julia.NURBStoolbox.demotorus","page":"NURBS Toolbox","title":"MagMechFEM_Matlab2Julia.NURBStoolbox.demotorus","text":"demotorus()\n\nA second demonstration of surface construction.\n\nExamples:\n\njulia> demotorus()\n\n\n\n\n\n","category":"function"},{"location":"api_NURBStoolbox/#MagMechFEM_Matlab2Julia.NURBStoolbox.demorevolve","page":"NURBS Toolbox","title":"MagMechFEM_Matlab2Julia.NURBStoolbox.demorevolve","text":"demorevolve()\n\nDemonstration of surface construction by revolving a profile curve.\n\nExamples:\n\njulia> demorevolve()\n\n\n\n\n\n","category":"function"},{"location":"api_NURBStoolbox/#MagMechFEM_Matlab2Julia.NURBStoolbox.demodegelev","page":"NURBS Toolbox","title":"MagMechFEM_Matlab2Julia.NURBStoolbox.demodegelev","text":"demodegelev()\n\nDemonstration of the degree elevation algorithm.\n\nExamples:\n\njulia> demodegelev()\n\n\n\n\n\n","category":"function"},{"location":"api_NURBStoolbox/#MagMechFEM_Matlab2Julia.NURBStoolbox.demokntins","page":"NURBS Toolbox","title":"MagMechFEM_Matlab2Julia.NURBStoolbox.demokntins","text":"demokntins()\n\nDemonstration of the knot insertion algorithm.\n\nExamples:\n\njulia> demokntins()\n\n\n\n\n\n","category":"function"},{"location":"api_NURBStoolbox/#MagMechFEM_Matlab2Julia.NURBStoolbox.demodercrv","page":"NURBS Toolbox","title":"MagMechFEM_Matlab2Julia.NURBStoolbox.demodercrv","text":"demodercrv()\n\nDemonstrates the construction of a general curve and determine of the derivative.\n\nExamples:\n\njulia> demodercrv()\n\n\n\n\n\n","category":"function"},{"location":"api_NURBStoolbox/#MagMechFEM_Matlab2Julia.NURBStoolbox.demodersrf","page":"NURBS Toolbox","title":"MagMechFEM_Matlab2Julia.NURBStoolbox.demodersrf","text":"demodersrf()\n\nDemonstrates the construction of a general surface derivatives.\n\nExamples:\n\njulia> demodersrf()\n\n\n\n\n\n","category":"function"},{"location":"api_NURBStoolbox/#MagMechFEM_Matlab2Julia.NURBStoolbox.demoruled","page":"NURBS Toolbox","title":"MagMechFEM_Matlab2Julia.NURBStoolbox.demoruled","text":"demoruled()\n\nDemonstration of ruled surface construction.\n\nExamples:\n\njulia> demoruled()\n\n\n\n\n\n","category":"function"},{"location":"api_NURBStoolbox/#MagMechFEM_Matlab2Julia.NURBStoolbox.democoons","page":"NURBS Toolbox","title":"MagMechFEM_Matlab2Julia.NURBStoolbox.democoons","text":"democoons()\n\nConstruction of a bilinearly blended Coons surface.\n\nExamples:\n\njulia> democoons()\n\n\n\n\n\n","category":"function"},{"location":"api_NURBStoolbox/#MagMechFEM_Matlab2Julia.NURBStoolbox.demo4surf","page":"NURBS Toolbox","title":"MagMechFEM_Matlab2Julia.NURBStoolbox.demo4surf","text":"demo4surf()\n\nDemonstration of a bilinear surface.\n\nExamples:\n\njulia> demo4surf()\n\n\n\n\n\n","category":"function"},{"location":"api_NURBStoolbox/#MagMechFEM_Matlab2Julia.NURBStoolbox.demogeom","page":"NURBS Toolbox","title":"MagMechFEM_Matlab2Julia.NURBStoolbox.demogeom","text":"demogeom()\n\nDemonstration of how to construct a 2D geometric shape from a piece-wise set of NURBSs.\n\nExamples:\n\njulia> demogeom()\n\n\n\n\n\n","category":"function"},{"location":"api_NURBStoolbox/#Private-Functions/Methods","page":"NURBS Toolbox","title":"Private Functions/Methods","text":"","category":"section"},{"location":"api_NURBStoolbox/","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"bincoeff\nfactln","category":"page"},{"location":"api_NURBStoolbox/#MagMechFEM_Matlab2Julia.NURBStoolbox.bincoeff","page":"NURBS Toolbox","title":"MagMechFEM_Matlab2Julia.NURBStoolbox.bincoeff","text":"bincoeff(n::I,k::I) where{I<:Integer}\n\nComputes the binomial coefficient.\n\n( n )      n!\n(   ) = --------\n( k )   k!(n-k)!\n\nArguments:\n\nn: n of n choose k\nk: k of n choose k\n\nOutput:\n\nb: binomial coefficient of n choose k\n\nExample:\n\njulia> b = bincoeff(n,k)\n\nReference:\n\nAlgorithm 6.1.6 from 'Numerical Recipes in C', 2nd Edition pg215 (William H. Press , Saul A. Teukolsky , William T. Vetterling , Brian P. Flannery  (1992))\n\n\n\n\n\n","category":"function"},{"location":"api_NURBStoolbox/#MagMechFEM_Matlab2Julia.NURBStoolbox.factln","page":"NURBS Toolbox","title":"MagMechFEM_Matlab2Julia.NURBStoolbox.factln","text":"factln(n::I) where{I<:Integer}\n\nComputes ln(n!).\n\nExample:\n\njulia> a = factln(n)\n\n\n\n\n\n","category":"function"},{"location":"api_NURBStoolbox/#Index","page":"NURBS Toolbox","title":"Index","text":"","category":"section"},{"location":"api_NURBStoolbox/","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"","category":"page"},{"location":"#MagMechFEM_Matlab2Julia","page":"Home","title":"MagMechFEM_Matlab2Julia","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"index.md\"]\nDepth = 2","category":"page"},{"location":"literate/ex_NURBStoolbox/","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"EditURL = \"https://github.com/LazyScholar/MagMechFEM_Matlab2Julia/blob/master/docs/literate/ex_NURBStoolbox.jl\"","category":"page"},{"location":"literate/ex_NURBStoolbox/","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"using MagMechFEM_Matlab2Julia.NURBStoolbox;\nusing Plots;\ndefault(background_color=:transparent, #hide\n        foreground_color=:grey, #hide\n        html_output_format=:svg); #hide\nnothing #hide","category":"page"},{"location":"literate/ex_NURBStoolbox/#NURBS-Toolbox","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"","category":"section"},{"location":"literate/ex_NURBStoolbox/","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"This notebook will demonstrate some capabilities of the ported NURBS Toolbox by D.M. Spink (Mark Spink  (2000)).","category":"page"},{"location":"literate/ex_NURBStoolbox/","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"Note that the original Matlab version has not been ported with the same syntax and behaviours.As Julia is a different language with different features. Skim through those examples to get a grasp on the differences if you know the original toolbox.","category":"page"},{"location":"literate/ex_NURBStoolbox/#NURBS-Data-Types","page":"NURBS Toolbox","title":"NURBS Data Types","text":"","category":"section"},{"location":"literate/ex_NURBStoolbox/","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"This section demonstrates how to construct NURBS data types. And how to identify them.","category":"page"},{"location":"literate/ex_NURBStoolbox/","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"To build NURBS structures it is advised to use the function nrbmak() which will accept inputs for surfaces or curves.","category":"page"},{"location":"literate/ex_NURBStoolbox/","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"line = nrbmak([0.0 1.5; 0.0 3.0],vec([0.0 0.0 1.0 1.0]))","category":"page"},{"location":"literate/ex_NURBStoolbox/","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"coefs = cat([0.0 0.0; 0.0 1.0],[1.0 1.0; 0.0 1.0],dims=3);\nknots = [vec([0.0 0.0 1.0 1.]),vec([0.0 0.0 1.0 1.0])];\nplane = nrbmak(coefs,knots)","category":"page"},{"location":"literate/ex_NURBStoolbox/","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"The fields of the data structures can be accessed similar to Matlab.","category":"page"},{"location":"literate/ex_NURBStoolbox/","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"plane.coefs","category":"page"},{"location":"literate/ex_NURBStoolbox/","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"Those created data types are typed. And can be therefore used to check for certain types.","category":"page"},{"location":"literate/ex_NURBStoolbox/","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"println( typeof(line ) )\nprintln( typeof(plane) )","category":"page"},{"location":"literate/ex_NURBStoolbox/","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"The abstract super type NURBS can be used to check for the superset of NURBS.","category":"page"},{"location":"literate/ex_NURBStoolbox/","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"println( typeof(line )<:NURBS )\nprintln( typeof(plane)<:NURBS )","category":"page"},{"location":"literate/ex_NURBStoolbox/","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"The types NURBS1D and NURBS2D can be used to check for NURBS curves or surfaces.","category":"page"},{"location":"literate/ex_NURBStoolbox/","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"println( typeof(line )<:NURBS1D )\nprintln( typeof(plane)<:NURBS1D )\nprintln( typeof(line )<:NURBS2D )\nprintln( typeof(plane)<:NURBS2D )","category":"page"},{"location":"literate/ex_NURBStoolbox/#NURBS-Curves","page":"NURBS Toolbox","title":"NURBS Curves","text":"","category":"section"},{"location":"literate/ex_NURBStoolbox/","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"As mentioned creates this toolbox NURBS curves with nrbmak(). This function uses a point matrix (each column a point and each row a coordinate)","category":"page"},{"location":"literate/ex_NURBStoolbox/","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"pnts = [0.5 1.5 4.5 3.0 7.5 6.0 8.5;\n        3.0 5.5 5.5 1.5 1.5 4.0 4.5;\n        0.0 0.0 0.0 0.0 0.0 0.0 0.0];\nnothing #hide","category":"page"},{"location":"literate/ex_NURBStoolbox/","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"and a corresponding knot open knot vector","category":"page"},{"location":"literate/ex_NURBStoolbox/","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"knots = vec([0 0 0 1/4 1/2 3/4 3/4 1 1 1]);\nnothing #hide","category":"page"},{"location":"literate/ex_NURBStoolbox/","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"as input arguments.","category":"page"},{"location":"literate/ex_NURBStoolbox/","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"crv = nrbmak(pnts,knots);\nnothing #hide","category":"page"},{"location":"literate/ex_NURBStoolbox/","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"Note that this toolbox does works with open NURBS curves!","category":"page"},{"location":"literate/ex_NURBStoolbox/","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"This curve can also build by using the test function nrbtestcrv(). To evaluate the curve the function nrbeval() can be used.","category":"page"},{"location":"literate/ex_NURBStoolbox/","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"p1 = nrbeval(crv,collect(range(0,1,length=101)),:cartesian)","category":"page"},{"location":"literate/ex_NURBStoolbox/","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"The results can be used for plotting or for further evaluation.","category":"page"},{"location":"literate/ex_NURBStoolbox/","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"plot(p1[1,:],p1[2,:],\n    border=:box,\n    label=\"crv\",\n    aspect_ratio=:equal,\n    linewidth=2)\nplot!(crv.coefs[1,:],crv.coefs[2,:],\n      linestyle=:dash,\n      markershape =:circle,\n      markerstrokewidth = 0.5,\n      label=\"crv.coefs\",\n      aspect_ratio=:equal)","category":"page"},{"location":"literate/ex_NURBStoolbox/#Surfaces","page":"NURBS Toolbox","title":"Surfaces","text":"","category":"section"},{"location":"literate/ex_NURBStoolbox/","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"The creation of NURBS surfaces is done similarly to the curves. The input for nrbmak with the difference that the points are defined with a 3D Array. The first and second dimension are used equally to the curve for U-direction and the third dimension stores the points in V direction.","category":"page"},{"location":"literate/ex_NURBStoolbox/","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"Since the process is similar we use a shortcut for creating the data structure.","category":"page"},{"location":"literate/ex_NURBStoolbox/","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"srf = nrbtestsrf()","category":"page"},{"location":"literate/ex_NURBStoolbox/","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"The evaluation of the surface can also be done with nrbeval().","category":"page"},{"location":"literate/ex_NURBStoolbox/","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"p2 = nrbeval(srf,[collect(range(0,1,length=20)),\n                  collect(range(0,1,length=20))]);\nnothing #hide","category":"page"},{"location":"literate/ex_NURBStoolbox/","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"The plotting of that data can be done with one of the many plotting ecosystems.","category":"page"},{"location":"literate/ex_NURBStoolbox/","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"Plots.pyplot();\nplot(p2[1,:,:],p2[2,:,:],p2[3,:,:],c = :jet,\n     st=:surface,\n     legend = nothing,\n     camera=[-30,30])\nplot!(srf.coefs[1,:,:],srf.coefs[2,:,:],srf.coefs[3,:,:],\n      linewidth=0.5,\n      st=:wireframe)","category":"page"},{"location":"literate/ex_NURBStoolbox/","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"The toolbox does also provide a plot wrapper nrbplot() for the ease of use.","category":"page"},{"location":"literate/ex_NURBStoolbox/","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"nrbplot(srf,[10;10],\n        c=:winter,\n        legend = nothing,\n        linewidth=0.5,\n        camera=[-40,60],\n        linecolor = :black)\nϑ = collect(range(0,stop=2*pi,length=180));\nt = cat(cos.(ϑ),sin.(ϑ),dims=2) ./2 .+ 0.5\np3 = nrbeval(srf,permutedims(t,[2,1]));\nplot!(p3[1,:],p3[2,:],p3[3,:] .- 2,linewidth=2)","category":"page"},{"location":"literate/ex_NURBStoolbox/","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"Note that this wrapper nrbplot() uses the Plots.pyplot() back end for 3D plots which limits the functionality to that ecosystem. One drawback e.g. is that the depth order/buffer is not considered between chained plot commands. This can be observed in the last plot. The curve is plotted 2 units bellow the surface.","category":"page"},{"location":"literate/ex_NURBStoolbox/","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"","category":"page"},{"location":"literate/ex_NURBStoolbox/","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"This page was generated using Literate.jl.","category":"page"},{"location":"NURBStoolbox/#NURBS-Toolbox","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"","category":"section"},{"location":"NURBStoolbox/#Licence","page":"NURBS Toolbox","title":"Licence","text":"","category":"section"},{"location":"NURBStoolbox/","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"This toolbox is licensed under the GPLv2 licence as stated in the LICENSE file in its corresponding directory.","category":"page"},{"location":"NURBStoolbox/#Overview","page":"NURBS Toolbox","title":"Overview","text":"","category":"section"},{"location":"NURBStoolbox/","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"This toolbox has been ported from Matlab to Julia as part of a bigger language porting project. Unfortunately the used files did not contain a file clearly indicating the licence. Therefore, the licence was set to GPLv2 assuming the roots and its original licence.","category":"page"},{"location":"NURBStoolbox/","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"This package was originally written in 2000 by D.M. Spink for Matlab and Scilab[1]. And initially hosted on the MathWorks servers. It was reuploaded by a third party[2] this state of the packages is used in this port (Version 1.0 by Mark Spink  (2000)). The seemingly original successor of the toolbox is the Octace community package nurbs[3] which is actively maintained. Some of the algorithms in this toolbox have been adopted from Les Piegl , Wayne Tiller  (1997).","category":"page"},{"location":"NURBStoolbox/","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"The original description characterizing this toolbox has been published on the website of M. Spink[1]. Here is an excerpt of that site.","category":"page"},{"location":"NURBStoolbox/","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"The NURBS toolbox is collection of routines for the creation, and manipulation of Non-Uniform Rational B-Splines (NURBS). NURBS have to some extent become the de facto industry standard for representing complex geometric information in CAD, CAE and CAM, and are an integral part of many standard data exchange formats such as IGES, STEP and PHIGS.The toolbox is available for either Matlab or Scilab, and contains both script files and c routines to increase the performance. The intention of these toolboxes is not to provide the worlds fastest NURBS manipulation packages, but that coupled with the matlab/scilab environments they provide a friendly means for interactive research and algorithm prototyping.All the nurbs routines are prefix with nrb to differentiate them from any other similar sounding matlab script files by other authors. The data structure used to represent the NURBS in Matlab is compatible with that used in the Spline Toolbox by C. de Boor and The MathWorks, Inc and can be manipulated as four dimensional univariate or multivariate B-Splines. Both packages also include demonstration scripts that show examples on how to use the toolbox, and also online help is available.For a detailed explanation of NURBS and how to manipulate them, I can strongly recommend the book by Les Piegl and Wayne Tiller called 'The NURBS Book' ISBN 3-540-61545-8. Please note that the 'C' code algorithms is this library are modified versions of the pseudo-code within the book.[ ... ]The NURBS toolbox is provide free of any charges and has a GPL license. The source code is available for the Linux, Solaris and Windows, however should compile easily on other platforms.","category":"page"},{"location":"NURBStoolbox/","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"I did not port the igesout function found in this toolbox as it is not main part of this toolbox, not necessary for this project and its licence was unclear[4].","category":"page"},{"location":"NURBStoolbox/","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"[1]: Spink, M. (2016, Jan. 10) NURBS Toolbox. ARIA. http://aria.uklinux.net/nurbs.php3 accessible via WayBackMachine","category":"page"},{"location":"NURBStoolbox/","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"[2]: Penguian (2010). NURBS Toolbox by D.M. Spink https://www.mathworks.com/matlabcentral/fileexchange/26390-nurbs-toolbox-by-d-m-spink, MATLAB Central File Exchange. Retrieved April 14, 2021.","category":"page"},{"location":"NURBStoolbox/","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"[3]: M. Spink, D. Claxton, C. de Falco, R. Vazquez (2021-03-09) Nurbs. Octave Forge Community packages. https://octave.sourceforge.io/nurbs/index.html","category":"page"},{"location":"NURBStoolbox/","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"[4]: Daniel Claxton (2021). igesout https://www.mathworks.com/matlabcentral/fileexchange/14470-igesout, MATLAB Central File Exchange. Retrieved April 21, 2021.","category":"page"},{"location":"NURBStoolbox/#Examples","page":"NURBS Toolbox","title":"Examples","text":"","category":"section"},{"location":"NURBStoolbox/","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"using MagMechFEM_Matlab2Julia.NURBStoolbox # hide\nusing Plots; # hide\nPlots.pyplot(); # hide\ndemorect()\nplot!(background_color=:transparent,foreground_color=:grey,html_output_format=:svg) # hide","category":"page"},{"location":"NURBStoolbox/","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"using MagMechFEM_Matlab2Julia.NURBStoolbox # hide\nusing Plots; # hide\nPlots.pyplot(); # hide\ndemocirc()\nplot!(background_color=:transparent,foreground_color=:grey,html_output_format=:svg) # hide","category":"page"},{"location":"NURBStoolbox/","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"using MagMechFEM_Matlab2Julia.NURBStoolbox # hide\nusing Plots; # hide\nPlots.pyplot(); # hide\ndemogeom()\nplot!(background_color=:transparent,foreground_color=:grey,html_output_format=:svg) # hide","category":"page"},{"location":"NURBStoolbox/","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"using MagMechFEM_Matlab2Julia.NURBStoolbox # hide\nusing Plots; # hide\nPlots.pyplot(); # hide\ndemoellip()\nplot!(background_color=:transparent,foreground_color=:grey,html_output_format=:svg) # hide","category":"page"},{"location":"NURBStoolbox/","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"using MagMechFEM_Matlab2Julia.NURBStoolbox # hide\nusing Plots; # hide\nPlots.pyplot(); # hide\ndemocurve()\nplot!(background_color=:transparent,foreground_color=:grey,html_output_format=:svg) # hide","category":"page"},{"location":"NURBStoolbox/","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"using MagMechFEM_Matlab2Julia.NURBStoolbox # hide\nusing Plots; # hide\nPlots.pyplot(); # hide\ndemohelix()\nplot!(background_color=:transparent,foreground_color=:grey,html_output_format=:svg,camera=[-45,25]) # hide","category":"page"},{"location":"NURBStoolbox/","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"using MagMechFEM_Matlab2Julia.NURBStoolbox # hide\nusing Plots; # hide\nPlots.pyplot(); # hide\ndemocylind()\nplot!(background_color=:transparent,foreground_color=:grey,html_output_format=:svg,camera=[-40,40]) # hide","category":"page"},{"location":"NURBStoolbox/","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"using MagMechFEM_Matlab2Julia.NURBStoolbox # hide\nusing Plots; # hide\nPlots.pyplot(); # hide\ndemotorus()\nplot!(background_color=:transparent,foreground_color=:grey,html_output_format=:svg) # hide","category":"page"},{"location":"NURBStoolbox/","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"using MagMechFEM_Matlab2Julia.NURBStoolbox # hide\nusing Plots; # hide\nPlots.pyplot(); # hide\ndemorevolve()\nplot!(background_color=:transparent,foreground_color=:grey,html_output_format=:svg) # hide","category":"page"},{"location":"NURBStoolbox/","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"using MagMechFEM_Matlab2Julia.NURBStoolbox # hide\nusing Plots; # hide\nPlots.pyplot(); # hide\ndemodegelev()\nplot!(background_color=:transparent,foreground_color=:grey,html_output_format=:svg) # hide","category":"page"},{"location":"NURBStoolbox/","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"using MagMechFEM_Matlab2Julia.NURBStoolbox # hide\nusing Plots; # hide\nPlots.pyplot(); # hide\ndemodercrv()\nplot!(background_color=:transparent,foreground_color=:grey,html_output_format=:svg) # hide","category":"page"},{"location":"NURBStoolbox/","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"using MagMechFEM_Matlab2Julia.NURBStoolbox # hide\nusing Plots; # hide\nPlots.pyplot(); # hide\ndemodersrf()\nplot!(background_color=:transparent,foreground_color=:grey,html_output_format=:svg) # hide","category":"page"},{"location":"NURBStoolbox/","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"using MagMechFEM_Matlab2Julia.NURBStoolbox # hide\nusing Plots; # hide\nPlots.pyplot(); # hide\ndemoruled()\nplot!(background_color=:transparent,foreground_color=:grey,html_output_format=:svg) # hide","category":"page"},{"location":"NURBStoolbox/","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"using MagMechFEM_Matlab2Julia.NURBStoolbox # hide\nusing Plots; # hide\nPlots.pyplot(); # hide\ndemo4surf()\nplot!(background_color=:transparent,foreground_color=:grey,html_output_format=:svg) # hide","category":"page"},{"location":"NURBStoolbox/","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"using MagMechFEM_Matlab2Julia.NURBStoolbox # hide\nusing Plots; # hide\nPlots.pyplot(); # hide\ndemocoons()\nplot!(background_color=:transparent,foreground_color=:grey,html_output_format=:svg) # hide","category":"page"},{"location":"NURBStoolbox/","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"For further examples see the NURBS Toolbox notebook.","category":"page"},{"location":"NURBStoolbox/#API","page":"NURBS Toolbox","title":"API","text":"","category":"section"},{"location":"NURBStoolbox/","page":"NURBS Toolbox","title":"NURBS Toolbox","text":"The API reference could provide a deeper understanding of the capabilities of the toolbox.","category":"page"}]
}
